<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构-单链表</title>
    <link href="/2022/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="单链表基本操作"><a href="#单链表基本操作" class="headerlink" title="单链表基本操作"></a>单链表基本操作</h1><figure class="highlight xl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></div></td><td class="code"><pre><code class="hljs xl">#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br><br><span class="hljs-comment">//定义结点结构</span><br>typedef struct ListNode<br>&#123;<br>    int <span class="hljs-keyword">data</span>;              <span class="hljs-comment">//结点的数据</span><br>    struct ListNode *next; <span class="hljs-comment">//下一个结点指针</span><br>&#125; ListNode;<br><br><span class="hljs-comment">//定义链表结构</span><br>typedef struct Linklist<br>&#123;<br>    ListNode head; <span class="hljs-comment">//指向结点的头指针</span><br>    int length;    <span class="hljs-comment">//链表长度</span><br>&#125; Linklist;<br><br><span class="hljs-comment">//结点初始化</span><br>ListNode *init_listnode(int val)<br>&#123;<br>    ListNode *p = (ListNode *)malloc(sizeof(ListNode));<br>    <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span><span class="hljs-keyword">data</span> = val;<br>    <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span>next = NULL;<br>    return p;<br>&#125;<br><br><span class="hljs-comment">//链表初始化</span><br>Linklist *init_linklist()<br>&#123;<br>    Linklist *l = (Linklist *)malloc(sizeof(Linklist));<br>    <span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>head.next = NULL;<br>    <span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>length = <span class="hljs-number">0</span>;<br>    return l;<br>&#125;<br><span class="hljs-comment">//销毁结点</span><br>void clear_listnode(ListNode *node)<br>&#123;<br>    <span class="hljs-keyword">if</span> (node == NULL)<br>        return;<br>    free(node);<br>    return;<br>&#125;<br><span class="hljs-comment">//销毁链表</span><br>void clear_linklist(Linklist *l)<br>&#123;<br>    <span class="hljs-keyword">if</span> (l == NULL)<br>        return;<br>    L<span class="hljs-function"><span class="hljs-title">istNode</span> *p = l-&gt;</span>head.next, *q;<br>    <span class="hljs-keyword">while</span> (p)<br>    &#123;<br>        <span class="hljs-function"><span class="hljs-title">q</span> = p-&gt;</span>next;<br>        clear_listnode(p);<br>        p = q;<br>    &#125;<br>    free(l);<br>    return;<br>&#125;<br><br><span class="hljs-comment">//插入结点</span><br>int insert(Linklist *l, int ind, int val)<br>&#123;<br>    <span class="hljs-keyword">if</span> (l == NULL)<br>        return <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (ind &lt; 0 || ind &gt; l-&gt;</span>length)<br>        return <span class="hljs-number">0</span>;<br>    L<span class="hljs-function"><span class="hljs-title">istNode</span> *p = &amp;(l-&gt;</span>head), *node = init_listnode(val);<br>    <span class="hljs-keyword">while</span> (ind--)<br>    &#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p-&gt;</span>next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">node</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = p-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span>next = node;<br>    <span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>length++;<br>    return <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//删除结点</span><br>int delete (Linklist *l, int ind)<br>&#123;<br>    <span class="hljs-keyword">if</span> (l == NULL)<br>        return <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (ind &lt; 0 || ind &gt;= l-&gt;</span>length)<br>        return <span class="hljs-number">0</span>;<br>    L<span class="hljs-function"><span class="hljs-title">istNode</span> *p = &amp;(l-&gt;</span>head), *q;<br>    <span class="hljs-keyword">while</span> (ind--)<br>    &#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p-&gt;</span>next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">q</span> = p-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">clear_listnode</span>(p-&gt;</span>next);<br>    <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span>next = q;<br>    <span class="hljs-function"><span class="hljs-title">l</span>-&gt;</span>length--;<br>    return <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//输出操作</span><br>void output(Linklist *l)<br>&#123;<br>    <span class="hljs-function"><span class="hljs-title">for</span> (ListNode *p = l-&gt;</span><span class="hljs-function"><span class="hljs-title">head</span>.next; p; p = p-&gt;</span>next)<br>        <span class="hljs-function"><span class="hljs-title">printf</span>(&quot;%d&quot;, p-&gt;</span><span class="hljs-keyword">data</span>);<br>&#125;<br><br>main()<br>&#123;<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h2><ol><li><strong>线程是程序执行的基本单位</strong></li><li><strong>进程是操作系统资源分配的基本单位</strong></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考研</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-栈</title>
    <link href="/2022/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
    <url>/2022/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="队列基本操作"><a href="#队列基本操作" class="headerlink" title="队列基本操作"></a>队列基本操作</h1><figure class="highlight arduino"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">//定义</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Stack</span><br>&#123;<br>    <span class="hljs-type">int</span> *data;<br>    <span class="hljs-type">int</span> top, size;<br>&#125; Stack;<br><br><span class="hljs-comment">//初始化</span><br><span class="hljs-function">Stack *<span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    Stack *s = (Stack *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Stack));<br>    s-&gt;data = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * n);<br>    s-&gt;size = n;<br>    s-&gt;top = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-comment">//删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(Stack *s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">free</span>(s-&gt;data);<br>    <span class="hljs-built_in">free</span>(s);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//判空操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">empty</span><span class="hljs-params">(Stack *s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> s-&gt;top == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">//查看栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">(Stack *s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">empty</span>(s))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> s-&gt;data[s-&gt;top];<br>&#125;<br><br><span class="hljs-comment">//入栈</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">push</span><span class="hljs-params">(Stack *s, <span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (s-&gt;top + <span class="hljs-number">1</span> == s-&gt;size)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    s-&gt;top += <span class="hljs-number">1</span>;<br>    s-&gt;data[s-&gt;top] = val;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">(Stack *s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">empty</span>(s))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    s-&gt;top -= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(Stack *s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s-&gt;top; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, s-&gt;data[i]);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h2><p><strong>括号匹配问题</strong><br><strong>栈可以解决完全包含关系问题</strong><br><strong>DFS,BFS,递归都是利用栈来实现的</strong></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考研</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-队列</title>
    <link href="/2022/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
    <url>/2022/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="队列基本操作"><a href="#队列基本操作" class="headerlink" title="队列基本操作"></a>队列基本操作</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">//定义结构定义</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Queue</span><br>&#123;<br>    <span class="hljs-comment">/* data */</span><br>    <span class="hljs-type">int</span> *data;<br>    <span class="hljs-type">int</span> head, tail; <span class="hljs-comment">//头 尾</span><br>    <span class="hljs-type">int</span> length;     <span class="hljs-comment">//最大长度</span><br>&#125; Queue;<br><br><span class="hljs-comment">//初始化</span><br><span class="hljs-function">Queue *<span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    Queue *q = (Queue *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Queue));<br>    q-&gt;data = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * n);<br>    q-&gt;head = q-&gt;tail = <span class="hljs-number">0</span>;<br>    q-&gt;length = n;<br>    <span class="hljs-keyword">return</span> q;<br>&#125;<br><br><span class="hljs-comment">//清除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(Queue *q)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (q == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">free</span>(q-&gt;data);<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//队列判空操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">empty</span><span class="hljs-params">(Queue *q)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> q-&gt;head == q-&gt;tail;<br>&#125;<br><br><span class="hljs-comment">//查看队首元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">front</span><span class="hljs-params">(Queue *q)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> q-&gt;data[q-&gt;head];<br>&#125;<br><br><span class="hljs-comment">//入队</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">push</span><span class="hljs-params">(Queue *q, <span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (q == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (q-&gt;tail == q-&gt;length)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    q-&gt;data[q-&gt;tail++] = val;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//出队</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">(Queue *q)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (q = <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">empty</span>(q))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    q-&gt;head++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(Queue *q)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = q-&gt;head; i &lt; q-&gt;tail; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, q-&gt;data[i]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考研</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-顺序表</title>
    <link href="/2022/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2022/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序表基本操作"><a href="#顺序表基本操作" class="headerlink" title="顺序表基本操作"></a>顺序表基本操作</h1><figure class="highlight gauss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta">#<span class="hljs-keyword">include</span> &lt;stdio.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> &lt;stdlib.h&gt;</span><br><br>typedef <span class="hljs-keyword">struct</span> <span class="hljs-type">Vector</span><br>&#123;<br>    int *data;        <span class="hljs-comment">//定义数组</span><br>    int size, length; <span class="hljs-comment">//数组大小 数组中当前的个数</span><br>&#125; <span class="hljs-built_in">Vector</span>;<br><br><span class="hljs-comment">//初始化顺序表</span><br><span class="hljs-built_in">Vector</span> *<span class="hljs-built_in">init</span>(int n)<br>&#123;<br>    <span class="hljs-built_in">Vector</span> *vec = (<span class="hljs-built_in">Vector</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-built_in">Vector</span>)); <span class="hljs-comment">//顺序表的空间</span><br>    <span class="hljs-built_in">vec</span>-&gt;data = (int *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(int) * n);     <span class="hljs-comment">//顺序表中连续存储区的空间 int * n 个字节</span><br>    <span class="hljs-built_in">vec</span>-&gt;size = n;                                  <span class="hljs-comment">//初始化大小</span><br>    <span class="hljs-built_in">vec</span>-&gt;length = <span class="hljs-number">0</span>;                                <span class="hljs-comment">//当前个数为0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">vec</span>;                                     <span class="hljs-comment">//返回顺序表</span><br>&#125;<br><br><span class="hljs-comment">//销毁顺序表</span><br>void <span class="hljs-keyword">clear</span>(<span class="hljs-built_in">Vector</span> *<span class="hljs-built_in">vec</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span> (vec == <span class="hljs-built_in">NULL</span>) <span class="hljs-comment">//如果为空地址则直接返回</span><br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">free</span>(<span class="hljs-built_in">vec</span>-&gt;data); <span class="hljs-comment">//先销毁数据区</span><br>    <span class="hljs-built_in">free</span>(<span class="hljs-built_in">vec</span>);       <span class="hljs-comment">//再销毁顺序表空间</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//插入操作</span><br>int <span class="hljs-built_in">insert</span>(<span class="hljs-built_in">Vector</span> *<span class="hljs-built_in">vec</span>, int index, int value)<br>&#123;                    <span class="hljs-comment">//①合法性判断</span><br>    <span class="hljs-keyword">if</span> (vec == <span class="hljs-built_in">NULL</span>) <span class="hljs-comment">//如果是空地址 返回0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">vec</span>-&gt;length == <span class="hljs-built_in">vec</span>-&gt;size) <span class="hljs-comment">//如果空间已满 返回0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; <span class="hljs-built_in">vec</span>-&gt;length) <span class="hljs-comment">//如果插入的位置不合法，小于0或者大于当前个数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//② 插入操作</span><br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-built_in">vec</span>-&gt;length; i &gt; index; i--)<br>        vec-&gt;data[i] = vec-&gt;data[i - 1]; <span class="hljs-comment">//从后往前</span><br>    <span class="hljs-built_in">vec</span>-&gt;data[index] = value;<br>    <span class="hljs-comment">//③改变个数</span><br>    <span class="hljs-built_in">vec</span>-&gt;length++;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//删除操作</span><br>int <span class="hljs-keyword">delete</span> (<span class="hljs-built_in">Vector</span> *<span class="hljs-built_in">vec</span>, int index)<br>&#123;<br>    <span class="hljs-comment">//①合法判断</span><br>    <span class="hljs-keyword">if</span> (vec == <span class="hljs-built_in">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">vec</span>-&gt;length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= <span class="hljs-built_in">vec</span>-&gt;length)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//②删除操作</span><br>    <span class="hljs-keyword">for</span> (int i = index + <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">vec</span>-&gt;length; i++)<br>        vec-&gt;data[i - 1] = vec-&gt;data[i];<br>    <span class="hljs-comment">//③改变个数</span><br>    <span class="hljs-built_in">vec</span>-&gt;length--;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//输出操作</span><br>void <span class="hljs-keyword">output</span>(<span class="hljs-built_in">Vector</span> *<span class="hljs-built_in">vec</span>)<br>&#123;<br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">vec</span>-&gt;length; i++)<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-built_in">vec</span>-&gt;data[i]);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br>int <span class="hljs-built_in">main</span>()<br>&#123;<br>    <span class="hljs-built_in">Vector</span> *a = <span class="hljs-built_in">init</span>(<span class="hljs-number">20</span>);<br><br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        insert(a, i, i + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">delete</span> (a, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">output</span>(a);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="malloc的用法"><a href="#malloc的用法" class="headerlink" title="malloc的用法"></a>malloc的用法</h2><p><em>malloc时动态内存分配函数，用于申请一块连续的指定大小的内存块区域以void</em>类型返回分配的内存区域地址*<br><em>指针自身 &#x3D; (指针类型</em>）malloc（sizeof（指针类型）<em>数据数量）</em></p><h2 id="realloc的用法"><a href="#realloc的用法" class="headerlink" title="realloc的用法"></a>realloc的用法</h2><p><em>用于重新分配一片空间，当分配成功时，会把之前的数据给拷贝过来，并返回新的指针。原来的地址会释放</em><br><em>当分配失败时，会返回空指针。运来的地址不会释放</em></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考研</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
